local Player = game.Players.LocalPlayer
_G.AutoRank = true

local function AutoBreakClick(areaName,ClickType)
	local breakableTable = {}
	local breakableID = nil

	local hum = game.Players.LocalPlayer.Character
	local raycastParams = RaycastParams.new()
	raycastParams.FilterDescendantsInstances = {hum,workspace.__THINGS.Breakables,workspace.__THINGS.Pets,workspace.Camera}
	raycastParams.FilterType = Enum.RaycastFilterType.Exclude
	raycastParams.IgnoreWater = true

	for i,v in pairs(workspace.__THINGS.Breakables:GetChildren()) do
		if v.ClassName == "Model" and workspace:Raycast(v.PrimaryPart.Position, Vector3.new(0, -50, 0),raycastParams).Instance.Name == "BREAK_ZONE" and string.find(workspace:Raycast(v.PrimaryPart.Position, Vector3.new(0, -50, 0),raycastParams).Instance.Parent.Parent.Parent.Name,areaName) then        
			if ClickType == "Random" then
				table.insert(breakableTable, tostring(v.Name))
			elseif ClickType == "Focused" then
				breakableID = tostring(v.Name)
			end
		end
	end

	if ClickType == "Random" then
		for z,BreakablesID in pairs(breakableTable) do task.wait()
			local args = {
				[1] = tostring(BreakablesID)
			}

			game:GetService("ReplicatedStorage").Network.Breakables_PlayerDealDamage:FireServer(unpack(args))
			table.remove(breakableTable,z)
		end
	elseif ClickType == "Focused" then
		for ranges = 1,10 do task.wait()
			local args = {
				[1] = tostring(breakableID)
			}

			game:GetService("ReplicatedStorage").Network.Breakables_PlayerDealDamage:FireServer(unpack(args))
		end
	end
end

local function teleportToArea(areaName)
	local args = {
		[1] = tostring(areaName)
	}

	game:GetService("ReplicatedStorage").Network.Teleports_RequestTeleport:InvokeServer(unpack(args))
	local setBreak = false

	for keepChecking = 1,math.huge do wait(0.2)
		if setBreak == false then
			local totalArea = #workspace.Map:GetChildren()

			if totalArea >= 5 then
				for _,Area in pairs(workspace.Map:GetChildren()) do
					if Area:IsA("Folder") then
						if string.find(Area.Name, tostring(areaName)) then
							if Area.INTERACT.BREAK_ZONES:FindFirstChild("BREAK_ZONE") then
								wait(8)
								Player.Character.HumanoidRootPart.CFrame = Area.INTERACT.BREAK_ZONES:FindFirstChild("BREAK_ZONE").CFrame
								setBreak = true
								break
							end
						end
					end
				end
			end
		else
			break
		end
	end
end

local function getMission()
	local TaskTable = {}
	
	for _,MissionText in pairs(Player.PlayerGui.GoalsSide.Frame.Quests.QuestsGradient.QuestsHolder:GetChildren()) do
		if MissionText:IsA("Frame") then
			if MissionText.Name == "RankUpNotif" then
				--Pass
			else
				if MissionText.Visible == true then
					local getMissionTask = tostring(MissionText.Title.Text)
					local getProgressTask = tonumber(tostring(MissionText.Progress.Text):split("/")[1])
					local getLastTask = tonumber(tostring(MissionText.Progress.Text):split("/")[2])
					
					--Normal Breaking
					if getMissionTask:split("Break ")[2] == nil then
						--Pass
					else
						TaskTable[MissionText.Name] = {"Normal Break",getProgressTask,getLastTask}
					end
					
					--Normal Hatch
					if getMissionTask:split("Hatch ")[2] == nil then
						--Pass
					else
						TaskTable[MissionText.Name] = {"Normal Hatch",getProgressTask,getLastTask}
					end
				end
			end
		end
	end
	
	return TaskTable
end

local function openEgg(eggName)
	local getEggID = nil
	local priceTable = {}
	local PlayerBalance = 0

	for z,BalanceList in pairs(Player.PlayerGui.MainLeft.Left.Currency.Coins:GetChildren()) do
		if BalanceList:IsA("Frame") then
			if BalanceList.Name == "Gold Coins" then
				if string.find(BalanceList.Amount.Text, "k") then
					local filteredPrice = string.gsub(tostring(BalanceList.Amount.Text),"k","")
					local calculatedPrice = tonumber(filteredPrice)*1000

					PlayerBalance = PlayerBalance +calculatedPrice
				else
					PlayerBalance = PlayerBalance +tonumber(BalanceList.Amount.Text)
				end
			end

			if BalanceList.Name == "Gold Bars" then
				if string.find(BalanceList.Amount.Text, "k") then
					local filteredPrice = string.gsub(tostring(BalanceList.Amount.Text),"k","")
					local calculatedPrice = tonumber(filteredPrice)*10000000

					PlayerBalance = PlayerBalance +calculatedPrice
				else
					PlayerBalance = PlayerBalance +tonumber(BalanceList.Amount.Text)*1000000
				end
			end

			if BalanceList.Name == "Platinum Coins" then
				if string.find(BalanceList.Amount.Text, "k") then
					local filteredPrice = string.gsub(tostring(BalanceList.Amount.Text),"k","")
					local calculatedPrice = tonumber(filteredPrice)*10000000000

					PlayerBalance = PlayerBalance +calculatedPrice
				else
					PlayerBalance = PlayerBalance +tonumber(BalanceList.Amount.Text)*1000000000
				end
			end

			if BalanceList.Name == "Platinum Bars" then
				if string.find(BalanceList.Amount.Text, "k") then
					local filteredPrice = string.gsub(tostring(BalanceList.Amount.Text),"k","")
					local calculatedPrice = tonumber(filteredPrice)*100000000000

					PlayerBalance = PlayerBalance +calculatedPrice
				else
					PlayerBalance = PlayerBalance +tonumber(BalanceList.Amount.Text)*10000000000
				end
			end

			if BalanceList.Name == "Emerald Coins" then
				if string.find(BalanceList.Amount.Text, "k") then
					local filteredPrice = string.gsub(tostring(BalanceList.Amount.Text),"k","")
					local calculatedPrice = tonumber(filteredPrice)*1000000000000000

					PlayerBalance = PlayerBalance +calculatedPrice
				else
					PlayerBalance = PlayerBalance +tonumber(BalanceList.Amount.Text)*10000000000000
				end
			end
		end
	end

	for x,CheckReplicatedEggs in pairs(game.ReplicatedStorage["__DIRECTORY"].Eggs["Zone Eggs"]:GetChildren()) do
		if string.find(CheckReplicatedEggs.Name, eggName) then
			print(CheckReplicatedEggs.Name)
			getEggID = tostring(CheckReplicatedEggs.Name):split(" |")[1]
			break
		end
	end

	local eggObject = workspace["__THINGS"].Eggs.Main:FindFirstChild(tostring(getEggID) .. " - Egg Capsule")
	local getEggPrice = eggObject.PriceHUD.PriceHUD
	local totalPrice = 0

	for z,EggPriceList in pairs(getEggPrice:GetChildren()) do
		if EggPriceList:IsA("Frame") then
			if EggPriceList.Name == "Gold Coins" then
				if string.find(EggPriceList.Amount.Text, "k") then
					local filteredPrice = string.gsub(tostring(EggPriceList.Amount.Text),"k","")
					local calculatedPrice = tonumber(filteredPrice)*1000

					totalPrice = totalPrice +calculatedPrice
				else
					totalPrice = totalPrice +tonumber(EggPriceList.Amount.Text)
				end
			end

			if EggPriceList.Name == "Gold Bars" then
				if string.find(EggPriceList.Amount.Text, "k") then
					local filteredPrice = string.gsub(tostring(EggPriceList.Amount.Text),"k","")
					local calculatedPrice = tonumber(filteredPrice)*10000000

					totalPrice = totalPrice +calculatedPrice
				else
					totalPrice = totalPrice +tonumber(EggPriceList.Amount.Text)*1000000
				end
			end

			if EggPriceList.Name == "Platinum Coins" then
				if string.find(EggPriceList.Amount.Text, "k") then
					local filteredPrice = string.gsub(tostring(EggPriceList.Amount.Text),"k","")
					local calculatedPrice = tonumber(filteredPrice)*10000000000

					totalPrice = totalPrice +calculatedPrice
				else
					totalPrice = totalPrice +tonumber(EggPriceList.Amount.Text)*1000000000
				end
			end

			if EggPriceList.Name == "Platinum Bars" then
				if string.find(EggPriceList.Amount.Text, "k") then
					local filteredPrice = string.gsub(tostring(EggPriceList.Amount.Text),"k","")
					local calculatedPrice = tonumber(filteredPrice)*100000000000

					totalPrice = totalPrice +calculatedPrice
				else
					totalPrice = totalPrice +tonumber(EggPriceList.Amount.Text)*10000000000
				end
			end

			if EggPriceList.Name == "Emerald Coins" then
				if string.find(EggPriceList.Amount.Text, "k") then
					local filteredPrice = string.gsub(tostring(EggPriceList.Amount.Text),"k","")
					local calculatedPrice = tonumber(filteredPrice)*1000000000000000

					totalPrice = totalPrice +calculatedPrice
				else
					totalPrice = totalPrice +tonumber(EggPriceList.Amount.Text)*10000000000000
				end
			end
		end
	end

	local quantity = tonumber(tostring(Player.PlayerGui["_MACHINES"].EggSlotsMachine.Frame.Slots.Items.Title.Remaining.Text):split("/")[1])
	local allCost = totalPrice*quantity

	if PlayerBalance >= allCost then
		local args = {
			[1] = tostring(eggName),
			[2] = tonumber(quantity)
		}

		game:GetService("ReplicatedStorage").Network.Eggs_RequestPurchase:InvokeServer(unpack(args))
	else
		return 'Not Enough'
	end
end

local function getLastArea()
	local MapTable = {}

	for _,MapButton in pairs(Player.PlayerGui.TeleportMap.Frame.Map.Locations:GetChildren()) do
		if MapButton:IsA("Frame") then
			if MapButton.Box.LockedHolder.Visible == false then
				local getTextHolder = string.gsub(tostring(MapButton.Box.TextHolder.Number.Text),"#","")
				local getAreaName = tostring(MapButton.Box.TextHolder.Title.Text)

				table.insert(MapTable, {tonumber(getTextHolder), getAreaName})
			end
		end
	end

	table.sort(MapTable, function(a,b)
		return a[1] > b[1]
	end)

	print(`#{MapTable[1][1]} | {MapTable[1][2]}`)
	return MapTable[1]
end

delay(0, function()
	while _G.AutoRank do wait(0.3)
		local Response = getMission()
		
		local pz = pcall(function()
			for _,Orbs in pairs(workspace["__THINGS"].Orbs:GetChildren()) do
				if Orbs:IsA("Part") then
					local args = {
						[1] = {
							[1] = tonumber(Orbs.Name)
						}
					}

					game:GetService("ReplicatedStorage").Network:FindFirstChild("Orbs: Collect"):FireServer(unpack(args))
					task.wait(); Orbs:Destroy()
				end
			end
		end)

		local lootHandling = pcall(function()
			local lootTable = {}

			for _,Loot in pairs(workspace["__THINGS"].Lootbags:GetChildren()) do
				table.insert(lootTable, tostring(Loot.Name))
			end

			local args = {
				[1] = lootTable
			}

			game:GetService("ReplicatedStorage").Network.Lootbags_Claim:FireServer(unpack(args))

			for z,TableValue in pairs(lootTable) do
				local pz = pcall(function()
					workspace["__THINGS"].Lootbags:FindFirstChild(TableValue):Destroy()
				end)

				table.remove(lootTable, z)
			end
		end)
		
		if Response["Easy"][1] == "Normal Break" then
			teleportToArea("Spawn")
			AutoBreakClick("Spawn","Focused")
		elseif Response["Easy"][1] == "Normal Hatch" then
			local eggResponse = openEgg("Cracked Egg")
			local isEnough = nil

			if eggResponse == "Not Enough" then
				isEnough = false
				local getCurrentArea = getLastArea()

				teleportToArea(getCurrentArea[2])
				AutoBreakClick(getCurrentArea[2], "Focused")
			end
			
			if isEnough == true then
				if Player:DistanceFromCharacter(workspace:FindFirstChild("__THINGS").Eggs.Main["1 - Egg Capsule"].Egg.Position) <= 10 then
					--Pass
				else
					Player.Character.HumanoidRootPart.CFrame = workspace:FindFirstChild("__THINGS").Eggs.Main["1 - Egg Capsule"].Egg.CFrame
				end
			end
		end
	end
end)
